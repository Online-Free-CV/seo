name: Publish Package

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Install Node (don't set cache: pnpm here)
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      # 2) Install pnpm and enable caching
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
          dest: ~/.pnpm-store

      # (Optional) Use pnpm cache
      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      # If you use standard-version in CI:
      - name: Release with standard-version
        run: pnpm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get package name and version
        id: pkg
        run: |
          echo "NAME=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if version already exists on npm
        id: exists
        run: |
          if npm view "${{ steps.pkg.outputs.NAME }}@${{ steps.pkg.outputs.VERSION }}" version > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Preview package
        if: steps.exists.outputs.exists == 'false'
        run: npm pack --dry-run

      - name: Publish to npm
        if: steps.exists.outputs.exists == 'false'
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
